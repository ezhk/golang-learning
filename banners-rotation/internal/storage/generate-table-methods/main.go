package main

import (
	"bytes"
	"flag"
	"go/format"
	"html/template"
	"io/ioutil"
	"log"
	"strings"
)

var FunctionsMap = template.FuncMap{
	"ToLower": strings.ToLower,
	"Title":   strings.Title,
}

func generate(tableName string) ([]byte, error) {
	var buf bytes.Buffer

	tmpl, err := template.New("go-generate-table-methods").Funcs(FunctionsMap).Parse(`// generated by generate-table-methods; DO NOT EDIT
package storage

import "github.com/ezhk/golang-learning/banners-rotation/internal/structs"

func (s *Storage) Create{{.Name | Title}}({{.Name | ToLower}}Name string) (structs.{{.Name | Title}}, error) {
	{{.Name | ToLower}} := structs.{{.Name | Title}}{Name: {{.Name | ToLower}}Name}
	result := s.db.Create(&{{.Name | ToLower}})

	return {{.Name | ToLower}}, result.Error
}

func (s *Storage) Read{{.Name | Title}}s() ([]*structs.{{.Name | Title}}, error) {
	{{.Name | ToLower}}s := []*structs.{{.Name | Title}}{}
	result := s.db.Find(&{{.Name | ToLower}}s)

	return {{.Name | ToLower}}s, result.Error
}

func (s *Storage) Update{{.Name | Title}}(b structs.{{.Name | Title}}) (structs.{{.Name | Title}}, error) {
	{{.Name | ToLower}} := structs.{{.Name | Title}}{ID: b.ID}
	result := s.db.Model(&{{.Name | ToLower}}).Updates(b)

	return {{.Name | ToLower}}, result.Error
}

func (s *Storage) Delete{{.Name | Title}}(id uint) error {
	result := s.db.Delete(&structs.{{.Name | Title}}{}, id)

	return result.Error
}
`)
	if err != nil {
		return nil, err
	}

	err = tmpl.Execute(&buf, struct{ Name string }{Name: tableName})
	if err != nil {
		return nil, err
	}

	source, err := format.Source(buf.Bytes())
	if err != nil {
		return nil, err
	}

	return source, nil
}

func main() {
	var (
		tableName string
		fileName  string
	)

	flag.StringVar(&tableName, "table", "banner", "table name")
	flag.StringVar(&fileName, "file", "banner.go", "output filepath")
	flag.Parse()

	generatedContent, err := generate(tableName)
	if err != nil {
		log.Fatal(err)
	}

	if err := ioutil.WriteFile(fileName, generatedContent, 0644); err != nil {
		log.Fatal(err)
	}
}
