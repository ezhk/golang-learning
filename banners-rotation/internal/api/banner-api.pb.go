// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.13.0
// source: banner-api.proto

package api

import (
	empty "github.com/golang/protobuf/ptypes/empty"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SimpleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID          uint64               `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Name        string               `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	Description string               `protobuf:"bytes,3,opt,name=Description,proto3" json:"Description,omitempty"`
	CreatedAt   *timestamp.Timestamp `protobuf:"bytes,4,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	UpdatedAt   *timestamp.Timestamp `protobuf:"bytes,5,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty"`
}

func (x *SimpleResponse) Reset() {
	*x = SimpleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_banner_api_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SimpleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SimpleResponse) ProtoMessage() {}

func (x *SimpleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_banner_api_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SimpleResponse.ProtoReflect.Descriptor instead.
func (*SimpleResponse) Descriptor() ([]byte, []int) {
	return file_banner_api_proto_rawDescGZIP(), []int{0}
}

func (x *SimpleResponse) GetID() uint64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *SimpleResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SimpleResponse) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *SimpleResponse) GetCreatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *SimpleResponse) GetUpdatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type MultipleSimpleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Objects []*SimpleResponse `protobuf:"bytes,1,rep,name=Objects,proto3" json:"Objects,omitempty"`
}

func (x *MultipleSimpleResponse) Reset() {
	*x = MultipleSimpleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_banner_api_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultipleSimpleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultipleSimpleResponse) ProtoMessage() {}

func (x *MultipleSimpleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_banner_api_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultipleSimpleResponse.ProtoReflect.Descriptor instead.
func (*MultipleSimpleResponse) Descriptor() ([]byte, []int) {
	return file_banner_api_proto_rawDescGZIP(), []int{1}
}

func (x *MultipleSimpleResponse) GetObjects() []*SimpleResponse {
	if x != nil {
		return x.Objects
	}
	return nil
}

type SimpleCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Description string `protobuf:"bytes,2,opt,name=Description,proto3" json:"Description,omitempty"`
}

func (x *SimpleCreateRequest) Reset() {
	*x = SimpleCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_banner_api_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SimpleCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SimpleCreateRequest) ProtoMessage() {}

func (x *SimpleCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_banner_api_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SimpleCreateRequest.ProtoReflect.Descriptor instead.
func (*SimpleCreateRequest) Descriptor() ([]byte, []int) {
	return file_banner_api_proto_rawDescGZIP(), []int{2}
}

func (x *SimpleCreateRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SimpleCreateRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type SimpleUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID          uint64 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	Description string `protobuf:"bytes,3,opt,name=Description,proto3" json:"Description,omitempty"`
}

func (x *SimpleUpdateRequest) Reset() {
	*x = SimpleUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_banner_api_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SimpleUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SimpleUpdateRequest) ProtoMessage() {}

func (x *SimpleUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_banner_api_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SimpleUpdateRequest.ProtoReflect.Descriptor instead.
func (*SimpleUpdateRequest) Descriptor() ([]byte, []int) {
	return file_banner_api_proto_rawDescGZIP(), []int{3}
}

func (x *SimpleUpdateRequest) GetID() uint64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *SimpleUpdateRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SimpleUpdateRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type SimpleRequestID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID uint64 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *SimpleRequestID) Reset() {
	*x = SimpleRequestID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_banner_api_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SimpleRequestID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SimpleRequestID) ProtoMessage() {}

func (x *SimpleRequestID) ProtoReflect() protoreflect.Message {
	mi := &file_banner_api_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SimpleRequestID.ProtoReflect.Descriptor instead.
func (*SimpleRequestID) Descriptor() ([]byte, []int) {
	return file_banner_api_proto_rawDescGZIP(), []int{4}
}

func (x *SimpleRequestID) GetID() uint64 {
	if x != nil {
		return x.ID
	}
	return 0
}

type SimpleResponseID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID uint64 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *SimpleResponseID) Reset() {
	*x = SimpleResponseID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_banner_api_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SimpleResponseID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SimpleResponseID) ProtoMessage() {}

func (x *SimpleResponseID) ProtoReflect() protoreflect.Message {
	mi := &file_banner_api_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SimpleResponseID.ProtoReflect.Descriptor instead.
func (*SimpleResponseID) Descriptor() ([]byte, []int) {
	return file_banner_api_proto_rawDescGZIP(), []int{5}
}

func (x *SimpleResponseID) GetID() uint64 {
	if x != nil {
		return x.ID
	}
	return 0
}

type PlacementCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BannerID uint64 `protobuf:"varint,1,opt,name=BannerID,proto3" json:"BannerID,omitempty"`
	SlotID   uint64 `protobuf:"varint,2,opt,name=SlotID,proto3" json:"SlotID,omitempty"`
	GroupID  uint64 `protobuf:"varint,3,opt,name=GroupID,proto3" json:"GroupID,omitempty"`
}

func (x *PlacementCreateRequest) Reset() {
	*x = PlacementCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_banner_api_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlacementCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlacementCreateRequest) ProtoMessage() {}

func (x *PlacementCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_banner_api_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlacementCreateRequest.ProtoReflect.Descriptor instead.
func (*PlacementCreateRequest) Descriptor() ([]byte, []int) {
	return file_banner_api_proto_rawDescGZIP(), []int{6}
}

func (x *PlacementCreateRequest) GetBannerID() uint64 {
	if x != nil {
		return x.BannerID
	}
	return 0
}

func (x *PlacementCreateRequest) GetSlotID() uint64 {
	if x != nil {
		return x.SlotID
	}
	return 0
}

func (x *PlacementCreateRequest) GetGroupID() uint64 {
	if x != nil {
		return x.GroupID
	}
	return 0
}

type PlacementUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID       uint64  `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	BannerID uint64  `protobuf:"varint,2,opt,name=BannerID,proto3" json:"BannerID,omitempty"`
	SlotID   uint64  `protobuf:"varint,3,opt,name=SlotID,proto3" json:"SlotID,omitempty"`
	GroupID  uint64  `protobuf:"varint,4,opt,name=GroupID,proto3" json:"GroupID,omitempty"`
	Shows    int64   `protobuf:"varint,5,opt,name=Shows,proto3" json:"Shows,omitempty"`
	Clicks   int64   `protobuf:"varint,6,opt,name=Clicks,proto3" json:"Clicks,omitempty"`
	Score    float64 `protobuf:"fixed64,7,opt,name=Score,proto3" json:"Score,omitempty"`
}

func (x *PlacementUpdateRequest) Reset() {
	*x = PlacementUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_banner_api_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlacementUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlacementUpdateRequest) ProtoMessage() {}

func (x *PlacementUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_banner_api_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlacementUpdateRequest.ProtoReflect.Descriptor instead.
func (*PlacementUpdateRequest) Descriptor() ([]byte, []int) {
	return file_banner_api_proto_rawDescGZIP(), []int{7}
}

func (x *PlacementUpdateRequest) GetID() uint64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *PlacementUpdateRequest) GetBannerID() uint64 {
	if x != nil {
		return x.BannerID
	}
	return 0
}

func (x *PlacementUpdateRequest) GetSlotID() uint64 {
	if x != nil {
		return x.SlotID
	}
	return 0
}

func (x *PlacementUpdateRequest) GetGroupID() uint64 {
	if x != nil {
		return x.GroupID
	}
	return 0
}

func (x *PlacementUpdateRequest) GetShows() int64 {
	if x != nil {
		return x.Shows
	}
	return 0
}

func (x *PlacementUpdateRequest) GetClicks() int64 {
	if x != nil {
		return x.Clicks
	}
	return 0
}

func (x *PlacementUpdateRequest) GetScore() float64 {
	if x != nil {
		return x.Score
	}
	return 0
}

type PlacementIDsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID       uint64 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	BannerID uint64 `protobuf:"varint,2,opt,name=BannerID,proto3" json:"BannerID,omitempty"`
	SlotID   uint64 `protobuf:"varint,3,opt,name=SlotID,proto3" json:"SlotID,omitempty"`
	GroupID  uint64 `protobuf:"varint,4,opt,name=GroupID,proto3" json:"GroupID,omitempty"`
}

func (x *PlacementIDsResponse) Reset() {
	*x = PlacementIDsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_banner_api_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlacementIDsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlacementIDsResponse) ProtoMessage() {}

func (x *PlacementIDsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_banner_api_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlacementIDsResponse.ProtoReflect.Descriptor instead.
func (*PlacementIDsResponse) Descriptor() ([]byte, []int) {
	return file_banner_api_proto_rawDescGZIP(), []int{8}
}

func (x *PlacementIDsResponse) GetID() uint64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *PlacementIDsResponse) GetBannerID() uint64 {
	if x != nil {
		return x.BannerID
	}
	return 0
}

func (x *PlacementIDsResponse) GetSlotID() uint64 {
	if x != nil {
		return x.SlotID
	}
	return 0
}

func (x *PlacementIDsResponse) GetGroupID() uint64 {
	if x != nil {
		return x.GroupID
	}
	return 0
}

type PlacementResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID     uint64          `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Banner *SimpleResponse `protobuf:"bytes,2,opt,name=Banner,proto3" json:"Banner,omitempty"`
	Slot   *SimpleResponse `protobuf:"bytes,3,opt,name=Slot,proto3" json:"Slot,omitempty"`
	Group  *SimpleResponse `protobuf:"bytes,4,opt,name=Group,proto3" json:"Group,omitempty"`
	Shows  int64           `protobuf:"varint,5,opt,name=Shows,proto3" json:"Shows,omitempty"`
	Clicks int64           `protobuf:"varint,6,opt,name=Clicks,proto3" json:"Clicks,omitempty"`
	Score  float64         `protobuf:"fixed64,7,opt,name=Score,proto3" json:"Score,omitempty"`
}

func (x *PlacementResponse) Reset() {
	*x = PlacementResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_banner_api_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlacementResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlacementResponse) ProtoMessage() {}

func (x *PlacementResponse) ProtoReflect() protoreflect.Message {
	mi := &file_banner_api_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlacementResponse.ProtoReflect.Descriptor instead.
func (*PlacementResponse) Descriptor() ([]byte, []int) {
	return file_banner_api_proto_rawDescGZIP(), []int{9}
}

func (x *PlacementResponse) GetID() uint64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *PlacementResponse) GetBanner() *SimpleResponse {
	if x != nil {
		return x.Banner
	}
	return nil
}

func (x *PlacementResponse) GetSlot() *SimpleResponse {
	if x != nil {
		return x.Slot
	}
	return nil
}

func (x *PlacementResponse) GetGroup() *SimpleResponse {
	if x != nil {
		return x.Group
	}
	return nil
}

func (x *PlacementResponse) GetShows() int64 {
	if x != nil {
		return x.Shows
	}
	return 0
}

func (x *PlacementResponse) GetClicks() int64 {
	if x != nil {
		return x.Clicks
	}
	return 0
}

func (x *PlacementResponse) GetScore() float64 {
	if x != nil {
		return x.Score
	}
	return 0
}

type MultiplePlacementResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Objects []*PlacementResponse `protobuf:"bytes,1,rep,name=Objects,proto3" json:"Objects,omitempty"`
}

func (x *MultiplePlacementResponse) Reset() {
	*x = MultiplePlacementResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_banner_api_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiplePlacementResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiplePlacementResponse) ProtoMessage() {}

func (x *MultiplePlacementResponse) ProtoReflect() protoreflect.Message {
	mi := &file_banner_api_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiplePlacementResponse.ProtoReflect.Descriptor instead.
func (*MultiplePlacementResponse) Descriptor() ([]byte, []int) {
	return file_banner_api_proto_rawDescGZIP(), []int{10}
}

func (x *MultiplePlacementResponse) GetObjects() []*PlacementResponse {
	if x != nil {
		return x.Objects
	}
	return nil
}

type BannerShowRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SlotID  uint64 `protobuf:"varint,1,opt,name=SlotID,proto3" json:"SlotID,omitempty"`
	GroupID uint64 `protobuf:"varint,2,opt,name=GroupID,proto3" json:"GroupID,omitempty"`
}

func (x *BannerShowRequest) Reset() {
	*x = BannerShowRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_banner_api_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BannerShowRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BannerShowRequest) ProtoMessage() {}

func (x *BannerShowRequest) ProtoReflect() protoreflect.Message {
	mi := &file_banner_api_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BannerShowRequest.ProtoReflect.Descriptor instead.
func (*BannerShowRequest) Descriptor() ([]byte, []int) {
	return file_banner_api_proto_rawDescGZIP(), []int{11}
}

func (x *BannerShowRequest) GetSlotID() uint64 {
	if x != nil {
		return x.SlotID
	}
	return 0
}

func (x *BannerShowRequest) GetGroupID() uint64 {
	if x != nil {
		return x.GroupID
	}
	return 0
}

var File_banner_api_proto protoreflect.FileDescriptor

var file_banner_api_proto_rawDesc = []byte{
	0x0a, 0x10, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2d, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x03, 0x61, 0x70, 0x69, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0xca, 0x01, 0x0a, 0x0e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x02, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x09,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x22, 0x47, 0x0a, 0x16, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x53, 0x69, 0x6d, 0x70,
	0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x07, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x52, 0x07, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x22, 0x4b, 0x0a, 0x13, 0x53, 0x69, 0x6d,
	0x70, 0x6c, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x5b, 0x0a, 0x13, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x49, 0x44, 0x12, 0x12, 0x0a,
	0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x21, 0x0a, 0x0f, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x02, 0x49, 0x44, 0x22, 0x22, 0x0a, 0x10, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x49, 0x44, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x49, 0x44, 0x22, 0x66, 0x0a, 0x16, 0x50, 0x6c,
	0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x49, 0x44,
	0x12, 0x16, 0x0a, 0x06, 0x53, 0x6c, 0x6f, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x06, 0x53, 0x6c, 0x6f, 0x74, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x44, 0x22, 0xba, 0x01, 0x0a, 0x16, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x49, 0x44, 0x12, 0x1a, 0x0a,
	0x08, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x08, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x6c, 0x6f,
	0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x53, 0x6c, 0x6f, 0x74, 0x49,
	0x44, 0x12, 0x18, 0x0a, 0x07, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x07, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x53,
	0x68, 0x6f, 0x77, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x53, 0x68, 0x6f, 0x77,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x22,
	0x74, 0x0a, 0x14, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x02, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x61, 0x6e, 0x6e, 0x65,
	0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x42, 0x61, 0x6e, 0x6e, 0x65,
	0x72, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x6c, 0x6f, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x06, 0x53, 0x6c, 0x6f, 0x74, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x44, 0x22, 0xe8, 0x01, 0x0a, 0x11, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x49, 0x44, 0x12, 0x2b, 0x0a, 0x06, 0x42,
	0x61, 0x6e, 0x6e, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x52, 0x06, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x04, 0x53, 0x6c, 0x6f, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x69, 0x6d,
	0x70, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x04, 0x53, 0x6c, 0x6f,
	0x74, 0x12, 0x29, 0x0a, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x14, 0x0a, 0x05,
	0x53, 0x68, 0x6f, 0x77, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x53, 0x68, 0x6f,
	0x77, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x73, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x63,
	0x6f, 0x72, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x22, 0x4d, 0x0a, 0x19, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x50, 0x6c, 0x61, 0x63,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a,
	0x07, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x07, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x22,
	0x45, 0x0a, 0x11, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x53, 0x68, 0x6f, 0x77, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x6c, 0x6f, 0x74, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x53, 0x6c, 0x6f, 0x74, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x32, 0xc4, 0x0d, 0x0a, 0x06, 0x42, 0x61, 0x6e, 0x6e, 0x65,
	0x72, 0x12, 0x59, 0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x61, 0x6e, 0x6e, 0x65,
	0x72, 0x12, 0x18, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x1a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14, 0x22, 0x0f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76,
	0x31, 0x2f, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0x5b, 0x0a, 0x0b,
	0x52, 0x65, 0x61, 0x64, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x1a, 0x1b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70,
	0x6c, 0x65, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x17, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x11, 0x12, 0x0f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76,
	0x31, 0x2f, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x73, 0x12, 0x5e, 0x0a, 0x0c, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x12, 0x18, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19,
	0x1a, 0x14, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72,
	0x73, 0x2f, 0x7b, 0x49, 0x44, 0x7d, 0x3a, 0x01, 0x2a, 0x12, 0x59, 0x0a, 0x0c, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x12, 0x14, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x1a,
	0x15, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x49, 0x44, 0x22, 0x1c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16, 0x2a, 0x14,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x73, 0x2f,
	0x7b, 0x49, 0x44, 0x7d, 0x12, 0x55, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x6c,
	0x6f, 0x74, 0x12, 0x18, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x18, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x12, 0x22, 0x0d, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x31, 0x2f, 0x73, 0x6c, 0x6f, 0x74, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0x57, 0x0a, 0x09, 0x52,
	0x65, 0x61, 0x64, 0x53, 0x6c, 0x6f, 0x74, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x1a, 0x1b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x53,
	0x69, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x15, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x0f, 0x12, 0x0d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x73,
	0x6c, 0x6f, 0x74, 0x73, 0x12, 0x5a, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x6c,
	0x6f, 0x74, 0x12, 0x18, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x1d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17, 0x1a, 0x12, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x31, 0x2f, 0x73, 0x6c, 0x6f, 0x74, 0x73, 0x2f, 0x7b, 0x49, 0x44, 0x7d, 0x3a, 0x01, 0x2a,
	0x12, 0x55, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x6c, 0x6f, 0x74, 0x12, 0x14,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x49, 0x44, 0x1a, 0x15, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x49, 0x44, 0x22, 0x1a, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x14, 0x2a, 0x12, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x6c, 0x6f,
	0x74, 0x73, 0x2f, 0x7b, 0x49, 0x44, 0x7d, 0x12, 0x57, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x18, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x69, 0x6d,
	0x70, 0x6c, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x13, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x19, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x13, 0x22, 0x0e, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x3a, 0x01, 0x2a,
	0x12, 0x59, 0x0a, 0x0a, 0x52, 0x65, 0x61, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x70, 0x6c, 0x65, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x16, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x10, 0x12, 0x0e, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x5c, 0x0a, 0x0b, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x18, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1e, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x18, 0x1a, 0x13, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x2f, 0x7b, 0x49, 0x44, 0x7d, 0x3a, 0x01, 0x2a, 0x12, 0x57, 0x0a, 0x0b, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x14, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53,
	0x69, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x1a, 0x15,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x49, 0x44, 0x22, 0x1b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x2a, 0x13, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x7b, 0x49,
	0x44, 0x7d, 0x12, 0x68, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x63,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x6c, 0x61, 0x63,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x19, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x49, 0x44, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1d, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x17, 0x22, 0x12, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x70,
	0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0x64, 0x0a, 0x0e,
	0x52, 0x65, 0x61, 0x64, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x70, 0x6c, 0x65, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14, 0x12, 0x12,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x12, 0x6d, 0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x63,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x6c, 0x61, 0x63,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x19, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x49, 0x44, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x22, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x1a, 0x17, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x70,
	0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x49, 0x44, 0x7d, 0x3a, 0x01,
	0x2a, 0x12, 0x5f, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x63, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x1a, 0x15, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x49,
	0x44, 0x22, 0x1f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x2a, 0x17, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x31, 0x2f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x49,
	0x44, 0x7d, 0x12, 0x75, 0x0a, 0x0a, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x53, 0x68, 0x6f, 0x77,
	0x12, 0x16, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x53, 0x68, 0x6f,
	0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50,
	0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x37, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x31, 0x12, 0x2f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76,
	0x31, 0x2f, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x73, 0x2f, 0x73, 0x69, 0x64, 0x2f, 0x7b, 0x53,
	0x6c, 0x6f, 0x74, 0x49, 0x44, 0x7d, 0x2f, 0x67, 0x69, 0x64, 0x2f, 0x7b, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x44, 0x7d, 0x2f, 0x73, 0x68, 0x6f, 0x77, 0x12, 0x62, 0x0a, 0x0b, 0x42, 0x61, 0x6e,
	0x6e, 0x65, 0x72, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x12, 0x14, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53,
	0x69, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x1a, 0x15,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x49, 0x44, 0x22, 0x26, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x12, 0x1e, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x73, 0x2f, 0x70,
	0x69, 0x64, 0x2f, 0x7b, 0x49, 0x44, 0x7d, 0x2f, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x42, 0x07, 0x5a,
	0x05, 0x2e, 0x3b, 0x61, 0x70, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_banner_api_proto_rawDescOnce sync.Once
	file_banner_api_proto_rawDescData = file_banner_api_proto_rawDesc
)

func file_banner_api_proto_rawDescGZIP() []byte {
	file_banner_api_proto_rawDescOnce.Do(func() {
		file_banner_api_proto_rawDescData = protoimpl.X.CompressGZIP(file_banner_api_proto_rawDescData)
	})
	return file_banner_api_proto_rawDescData
}

var file_banner_api_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_banner_api_proto_goTypes = []interface{}{
	(*SimpleResponse)(nil),            // 0: api.SimpleResponse
	(*MultipleSimpleResponse)(nil),    // 1: api.MultipleSimpleResponse
	(*SimpleCreateRequest)(nil),       // 2: api.SimpleCreateRequest
	(*SimpleUpdateRequest)(nil),       // 3: api.SimpleUpdateRequest
	(*SimpleRequestID)(nil),           // 4: api.SimpleRequestID
	(*SimpleResponseID)(nil),          // 5: api.SimpleResponseID
	(*PlacementCreateRequest)(nil),    // 6: api.PlacementCreateRequest
	(*PlacementUpdateRequest)(nil),    // 7: api.PlacementUpdateRequest
	(*PlacementIDsResponse)(nil),      // 8: api.PlacementIDsResponse
	(*PlacementResponse)(nil),         // 9: api.PlacementResponse
	(*MultiplePlacementResponse)(nil), // 10: api.MultiplePlacementResponse
	(*BannerShowRequest)(nil),         // 11: api.BannerShowRequest
	(*timestamp.Timestamp)(nil),       // 12: google.protobuf.Timestamp
	(*empty.Empty)(nil),               // 13: google.protobuf.Empty
}
var file_banner_api_proto_depIdxs = []int32{
	12, // 0: api.SimpleResponse.CreatedAt:type_name -> google.protobuf.Timestamp
	12, // 1: api.SimpleResponse.UpdatedAt:type_name -> google.protobuf.Timestamp
	0,  // 2: api.MultipleSimpleResponse.Objects:type_name -> api.SimpleResponse
	0,  // 3: api.PlacementResponse.Banner:type_name -> api.SimpleResponse
	0,  // 4: api.PlacementResponse.Slot:type_name -> api.SimpleResponse
	0,  // 5: api.PlacementResponse.Group:type_name -> api.SimpleResponse
	9,  // 6: api.MultiplePlacementResponse.Objects:type_name -> api.PlacementResponse
	2,  // 7: api.Banner.CreateBanner:input_type -> api.SimpleCreateRequest
	13, // 8: api.Banner.ReadBanners:input_type -> google.protobuf.Empty
	3,  // 9: api.Banner.UpdateBanner:input_type -> api.SimpleUpdateRequest
	4,  // 10: api.Banner.DeleteBanner:input_type -> api.SimpleRequestID
	2,  // 11: api.Banner.CreateSlot:input_type -> api.SimpleCreateRequest
	13, // 12: api.Banner.ReadSlots:input_type -> google.protobuf.Empty
	3,  // 13: api.Banner.UpdateSlot:input_type -> api.SimpleUpdateRequest
	4,  // 14: api.Banner.DeleteSlot:input_type -> api.SimpleRequestID
	2,  // 15: api.Banner.CreateGroup:input_type -> api.SimpleCreateRequest
	13, // 16: api.Banner.ReadGroups:input_type -> google.protobuf.Empty
	3,  // 17: api.Banner.UpdateGroup:input_type -> api.SimpleUpdateRequest
	4,  // 18: api.Banner.DeleteGroup:input_type -> api.SimpleRequestID
	6,  // 19: api.Banner.CreatePlacement:input_type -> api.PlacementCreateRequest
	13, // 20: api.Banner.ReadPlacements:input_type -> google.protobuf.Empty
	7,  // 21: api.Banner.UpdatePlacement:input_type -> api.PlacementUpdateRequest
	4,  // 22: api.Banner.DeletePlacement:input_type -> api.SimpleRequestID
	11, // 23: api.Banner.BannerShow:input_type -> api.BannerShowRequest
	4,  // 24: api.Banner.BannerClick:input_type -> api.SimpleRequestID
	0,  // 25: api.Banner.CreateBanner:output_type -> api.SimpleResponse
	1,  // 26: api.Banner.ReadBanners:output_type -> api.MultipleSimpleResponse
	0,  // 27: api.Banner.UpdateBanner:output_type -> api.SimpleResponse
	5,  // 28: api.Banner.DeleteBanner:output_type -> api.SimpleResponseID
	0,  // 29: api.Banner.CreateSlot:output_type -> api.SimpleResponse
	1,  // 30: api.Banner.ReadSlots:output_type -> api.MultipleSimpleResponse
	0,  // 31: api.Banner.UpdateSlot:output_type -> api.SimpleResponse
	5,  // 32: api.Banner.DeleteSlot:output_type -> api.SimpleResponseID
	0,  // 33: api.Banner.CreateGroup:output_type -> api.SimpleResponse
	1,  // 34: api.Banner.ReadGroups:output_type -> api.MultipleSimpleResponse
	0,  // 35: api.Banner.UpdateGroup:output_type -> api.SimpleResponse
	5,  // 36: api.Banner.DeleteGroup:output_type -> api.SimpleResponseID
	8,  // 37: api.Banner.CreatePlacement:output_type -> api.PlacementIDsResponse
	10, // 38: api.Banner.ReadPlacements:output_type -> api.MultiplePlacementResponse
	8,  // 39: api.Banner.UpdatePlacement:output_type -> api.PlacementIDsResponse
	5,  // 40: api.Banner.DeletePlacement:output_type -> api.SimpleResponseID
	9,  // 41: api.Banner.BannerShow:output_type -> api.PlacementResponse
	5,  // 42: api.Banner.BannerClick:output_type -> api.SimpleResponseID
	25, // [25:43] is the sub-list for method output_type
	7,  // [7:25] is the sub-list for method input_type
	7,  // [7:7] is the sub-list for extension type_name
	7,  // [7:7] is the sub-list for extension extendee
	0,  // [0:7] is the sub-list for field type_name
}

func init() { file_banner_api_proto_init() }
func file_banner_api_proto_init() {
	if File_banner_api_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_banner_api_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SimpleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_banner_api_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultipleSimpleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_banner_api_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SimpleCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_banner_api_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SimpleUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_banner_api_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SimpleRequestID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_banner_api_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SimpleResponseID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_banner_api_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlacementCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_banner_api_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlacementUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_banner_api_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlacementIDsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_banner_api_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlacementResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_banner_api_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiplePlacementResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_banner_api_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BannerShowRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_banner_api_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_banner_api_proto_goTypes,
		DependencyIndexes: file_banner_api_proto_depIdxs,
		MessageInfos:      file_banner_api_proto_msgTypes,
	}.Build()
	File_banner_api_proto = out.File
	file_banner_api_proto_rawDesc = nil
	file_banner_api_proto_goTypes = nil
	file_banner_api_proto_depIdxs = nil
}
