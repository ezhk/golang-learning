// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package server

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// BannerClient is the client API for Banner service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BannerClient interface {
	// Banner methods.
	CreateBanner(ctx context.Context, in *SimpleCreateRequest, opts ...grpc.CallOption) (*SimpleResponse, error)
	ReadBanners(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*MultipleSimpleResponse, error)
	UpdateBanner(ctx context.Context, in *SimpleUpdateRequest, opts ...grpc.CallOption) (*SimpleResponse, error)
	DeleteBanner(ctx context.Context, in *SimpleDeleteRequest, opts ...grpc.CallOption) (*SimpleDeleteResponse, error)
}

type bannerClient struct {
	cc grpc.ClientConnInterface
}

func NewBannerClient(cc grpc.ClientConnInterface) BannerClient {
	return &bannerClient{cc}
}

func (c *bannerClient) CreateBanner(ctx context.Context, in *SimpleCreateRequest, opts ...grpc.CallOption) (*SimpleResponse, error) {
	out := new(SimpleResponse)
	err := c.cc.Invoke(ctx, "/server.Banner/CreateBanner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bannerClient) ReadBanners(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*MultipleSimpleResponse, error) {
	out := new(MultipleSimpleResponse)
	err := c.cc.Invoke(ctx, "/server.Banner/ReadBanners", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bannerClient) UpdateBanner(ctx context.Context, in *SimpleUpdateRequest, opts ...grpc.CallOption) (*SimpleResponse, error) {
	out := new(SimpleResponse)
	err := c.cc.Invoke(ctx, "/server.Banner/UpdateBanner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bannerClient) DeleteBanner(ctx context.Context, in *SimpleDeleteRequest, opts ...grpc.CallOption) (*SimpleDeleteResponse, error) {
	out := new(SimpleDeleteResponse)
	err := c.cc.Invoke(ctx, "/server.Banner/DeleteBanner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BannerServer is the server API for Banner service.
// All implementations should embed UnimplementedBannerServer
// for forward compatibility
type BannerServer interface {
	// Banner methods.
	CreateBanner(context.Context, *SimpleCreateRequest) (*SimpleResponse, error)
	ReadBanners(context.Context, *empty.Empty) (*MultipleSimpleResponse, error)
	UpdateBanner(context.Context, *SimpleUpdateRequest) (*SimpleResponse, error)
	DeleteBanner(context.Context, *SimpleDeleteRequest) (*SimpleDeleteResponse, error)
}

// UnimplementedBannerServer should be embedded to have forward compatible implementations.
type UnimplementedBannerServer struct {
}

func (UnimplementedBannerServer) CreateBanner(context.Context, *SimpleCreateRequest) (*SimpleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBanner not implemented")
}
func (UnimplementedBannerServer) ReadBanners(context.Context, *empty.Empty) (*MultipleSimpleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadBanners not implemented")
}
func (UnimplementedBannerServer) UpdateBanner(context.Context, *SimpleUpdateRequest) (*SimpleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBanner not implemented")
}
func (UnimplementedBannerServer) DeleteBanner(context.Context, *SimpleDeleteRequest) (*SimpleDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBanner not implemented")
}

// UnsafeBannerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BannerServer will
// result in compilation errors.
type UnsafeBannerServer interface {
	mustEmbedUnimplementedBannerServer()
}

func RegisterBannerServer(s *grpc.Server, srv BannerServer) {
	s.RegisterService(&_Banner_serviceDesc, srv)
}

func _Banner_CreateBanner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SimpleCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BannerServer).CreateBanner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/server.Banner/CreateBanner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BannerServer).CreateBanner(ctx, req.(*SimpleCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Banner_ReadBanners_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BannerServer).ReadBanners(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/server.Banner/ReadBanners",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BannerServer).ReadBanners(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Banner_UpdateBanner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SimpleUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BannerServer).UpdateBanner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/server.Banner/UpdateBanner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BannerServer).UpdateBanner(ctx, req.(*SimpleUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Banner_DeleteBanner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SimpleDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BannerServer).DeleteBanner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/server.Banner/DeleteBanner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BannerServer).DeleteBanner(ctx, req.(*SimpleDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Banner_serviceDesc = grpc.ServiceDesc{
	ServiceName: "server.Banner",
	HandlerType: (*BannerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateBanner",
			Handler:    _Banner_CreateBanner_Handler,
		},
		{
			MethodName: "ReadBanners",
			Handler:    _Banner_ReadBanners_Handler,
		},
		{
			MethodName: "UpdateBanner",
			Handler:    _Banner_UpdateBanner_Handler,
		},
		{
			MethodName: "DeleteBanner",
			Handler:    _Banner_DeleteBanner_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "server.proto",
}
