package main

import (
	"testing"

	"github.com/stretchr/testify/require"
)

func TestGenerate(t *testing.T) {
	t.Run("generate server methods", func(t *testing.T) {
		data, err := generate("banner")
		require.NoError(t, err)

		require.Equal(t, `// generated by generate-grpc-methods; DO NOT EDIT
package server

import (
	"context"

	"github.com/ezhk/golang-learning/banners-rotation/internal/api"
	"github.com/ezhk/golang-learning/banners-rotation/internal/structs"
	"github.com/golang/protobuf/ptypes/empty"
	"google.golang.org/protobuf/types/known/timestamppb"
)

func ConvertBannerToSimpleResponse(b structs.Banner) *api.SimpleResponse {
	return &api.SimpleResponse{
		ID:          b.ID,
		Name:        b.Name,
		Description: b.Description,
		CreatedAt:   timestamppb.New(b.CreatedAt),
		UpdatedAt:   timestamppb.New(b.UpdatedAt),
	}
}

func ConvertSimpleUpdateRequestToBanner(r *api.SimpleUpdateRequest) structs.Banner {
	return structs.Banner{
		ID:          r.ID,
		Name:        r.Name,
		Description: r.Description,
	}
}

func (s Server) CreateBanner(ctx context.Context, r *api.SimpleCreateRequest) (*api.SimpleResponse, error) {
	banner, err := s.storage.CreateBanner(r.Name, r.Description)
	if err != nil {
		return nil, err
	}

	return ConvertBannerToSimpleResponse(banner), nil
}

func (s Server) ReadBanners(ctx context.Context, empty *empty.Empty) (*api.MultipleSimpleResponse, error) {
	banners, err := s.storage.ReadBanners()
	if err != nil {
		return nil, err
	}

	simpleResponses := make([]*api.SimpleResponse, 0)
	for _, banner := range banners {
		simpleResponses = append(simpleResponses, ConvertBannerToSimpleResponse(*banner))
	}

	return &api.MultipleSimpleResponse{Objects: simpleResponses}, nil
}

func (s Server) UpdateBanner(ctx context.Context, r *api.SimpleUpdateRequest) (*api.SimpleResponse, error) {
	banner := ConvertSimpleUpdateRequestToBanner(r)
	b, err := s.storage.UpdateBanner(banner)
	if err != nil {
		return nil, err
	}

	return ConvertBannerToSimpleResponse(b), nil
}

func (s Server) DeleteBanner(ctx context.Context, r *api.SimpleRequestID) (*api.SimpleResponseID, error) {
	if err := s.storage.DeleteBanner(r.ID); err != nil {
		return nil, err
	}

	return &api.SimpleResponseID{ID: r.ID}, nil
}
`, string(data))
	})
}
