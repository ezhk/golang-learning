// generated by generate-grpc-methods; DO NOT EDIT
package server

import (
	"context"

	"github.com/ezhk/golang-learning/banners-rotation/internal/api"
	"github.com/ezhk/golang-learning/banners-rotation/internal/structs"
	"github.com/golang/protobuf/ptypes/empty"
	"google.golang.org/protobuf/types/known/timestamppb"
)

func ConvertGroupToSimpleResponse(b structs.Group) *api.SimpleResponse {
	return &api.SimpleResponse{
		ID:          b.ID,
		Name:        b.Name,
		Description: b.Description,
		CreatedAt:   timestamppb.New(b.CreatedAt),
		UpdatedAt:   timestamppb.New(b.UpdatedAt),
	}
}

func ConvertSimpleUpdateRequestToGroup(r *api.SimpleUpdateRequest) structs.Group {
	return structs.Group{
		ID:          r.ID,
		Name:        r.Name,
		Description: r.Description,
	}
}

func (s Server) CreateGroup(ctx context.Context, r *api.SimpleCreateRequest) (*api.SimpleResponse, error) {
	group, err := s.storage.CreateGroup(r.Name, r.Description)
	if err != nil {
		return nil, err
	}

	return ConvertGroupToSimpleResponse(group), nil
}

func (s Server) ReadGroups(ctx context.Context, empty *empty.Empty) (*api.MultipleSimpleResponse, error) {
	groups, err := s.storage.ReadGroups()
	if err != nil {
		return nil, err
	}

	simpleResponses := make([]*api.SimpleResponse, 0)
	for _, group := range groups {
		simpleResponses = append(simpleResponses, ConvertGroupToSimpleResponse(*group))
	}

	return &api.MultipleSimpleResponse{Objects: simpleResponses}, nil
}

func (s Server) UpdateGroup(ctx context.Context, r *api.SimpleUpdateRequest) (*api.SimpleResponse, error) {
	group := ConvertSimpleUpdateRequestToGroup(r)
	b, err := s.storage.UpdateGroup(group)
	if err != nil {
		return nil, err
	}

	return ConvertGroupToSimpleResponse(b), nil
}

func (s Server) DeleteGroup(ctx context.Context, r *api.SimpleRequestID) (*api.SimpleResponseID, error) {
	if err := s.storage.DeleteGroup(r.ID); err != nil {
		return nil, err
	}

	return &api.SimpleResponseID{ID: r.ID}, nil
}
